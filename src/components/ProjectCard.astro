---
import type { Project } from '../types/project';
import { UX_CONFIG } from '../utils/ux';

export interface Props {
    project: Project;
}

const { project } = Astro.props;
---

<div 
    class="project-card" 
    data-project-id={project.id}
    data-project-modal="trigger"
>
    <div class="project-card-inner">
        <div class="project-image-container">
            <img 
                src={project.coverImage} 
                alt={`${project.name} Preview`} 
                class="project-image"
                loading="lazy"
            />
        </div>

        <div class="project-details">
            <h3 class="project-title">{project.name}</h3>
            <p class="project-description">{project.shortDescription}</p>

            <div class="project-technologies">
                {project.technologies.map(tech => (
                    <div class="tech-badge" title={tech.name}>
                        <img 
                            src={tech.icon} 
                            alt={`${tech.name} Icon`} 
                            loading="lazy"
                        />
                    </div>
                ))}
            </div>

            <div class="project-stats">
                {project.statistics.map(stat => (
                    <div 
                        class="stat-item" 
                        style={`--stat-color: ${stat.color}`}
                    >
                        <span class="stat-icon">{stat.icon}</span>
                        <span class="stat-value">{stat.value}</span>
                        <span class="stat-label">{stat.label}</span>
                    </div>
                ))}
            </div>

            <div class="project-links">
                {project.links.map(link => (
                    <a 
                        href={link.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class={`project-link ${link.type}`}
                    >
                        {link.type === 'github' ? 'GitHub' : 'Live Preview'}
                    </a>
                ))}
            </div>
        </div>
    </div>
</div>

<style define:vars={{
    transitionDuration: `${UX_CONFIG.TRANSITION_DURATION}ms`
}}>
    .project-card {
        background: color-mix(in srgb, var(--bg-primary) 80%, transparent);
        border-radius: 16px;
        overflow: hidden;
        transition: 
            transform 0.3s ease,
            box-shadow 0.3s ease;
        cursor: pointer;
        position: relative;
        perspective: 1000px;
        border: 1px solid color-mix(in srgb, var(--accent) 20%, transparent);
    }

    .project-card:hover {
        transform: scale(1.03) rotateX(2deg);
        box-shadow: 
            0 15px 30px color-mix(in srgb, var(--primary) 20%, transparent),
            0 10px 20px color-mix(in srgb, var(--primary) 10%, transparent);
    }

    .project-card-inner {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .project-image-container {
        position: relative;
        overflow: hidden;
    }

    .project-image {
        width: 100%;
        height: 250px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .project-card:hover .project-image {
        transform: scale(1.05);
    }

    .project-details {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .project-title {
        font-size: 1.5rem;
        color: var(--primary);
        margin: 0;
        transition: color var(--transitionDuration) ease;
    }

    .project-description {
        color: var(--text-secondary);
        opacity: 0.8;
        margin: 0;
    }

    .project-technologies {
        display: flex;
        gap: 0.75rem;
        margin-top: 1rem;
    }

    .tech-badge {
        width: 40px;
        height: 40px;
        background: color-mix(in srgb, var(--accent) 10%, transparent);
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: transform 0.3s ease;
    }

    .tech-badge:hover {
        transform: scale(1.1);
    }

    .tech-badge img {
        width: 24px;
        height: 24px;
    }

    .project-stats {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
    }

    .stat-icon {
        font-size: 1.5rem;
        color: var(--stat-color);
    }

    .stat-value {
        font-weight: bold;
        color: var(--primary);
    }

    .stat-label {
        font-size: 0.75rem;
        color: var(--text-secondary);
        text-transform: uppercase;
    }

    .project-links {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .project-link {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        transition: 
            background-color var(--transitionDuration) ease,
            color var(--transitionDuration) ease;
    }

    .project-link.github {
        background: color-mix(in srgb, var(--accent) 10%, transparent);
        color: var(--text-primary);
    }

    .project-link.live {
        background: var(--primary);
        color: var(--bg-primary);
    }

    .project-link:hover {
        opacity: 0.9;
    }

    @media (max-width: 768px) {
        .project-stats {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const projectCards = document.querySelectorAll('[data-project-modal="trigger"]');
        
        projectCards.forEach(card => {
            card.addEventListener('click', () => {
                const projectId = card.getAttribute('data-project-id');
                // Future: Implement modal logic
                console.log(`Open modal for project: ${projectId}`);
            });
        });
    });
</script>
