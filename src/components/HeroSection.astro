---
import SocialLinks from './SocialLinks.astro';

interface HeroProps {
    name: string;
    taglines: string[];
    description: string;
}

const { 
    name = "Mikey Shaw", 
    taglines = ['Innovator', 'Full Stack Developer', 'AI & Web3 Enthusiast'],
    description = "A passionate digital architect transforming complex challenges into innovative technological solutions."
} = Astro.props;
---

<section class="advanced-hero">
    <div class="hero-grid">
        <div class="hero-content">
            <div class="hero-intro">
                <div class="code-terminal">
                    <div class="terminal-header">
                        <span class="terminal-dot red"></span>
                        <span class="terminal-dot yellow"></span>
                        <span class="terminal-dot green"></span>
                    </div>
                    <div class="terminal-body">
                        <code>
                            <span class="terminal-prompt">âžœ</span> 
                            <span class="terminal-path">~/digital-architect</span> 
                            <span class="terminal-command">whoami</span>
                            <br />
                            <span class="terminal-result">{name}</span>
                        </code>
                    </div>
                </div>
            </div>

            <h1 class="hero-title">
                {taglines.map((tagline, index) => (
                    <span 
                        class="hero-tagline" 
                        style={`--delay: ${index * 0.2}s`}
                    >
                        {tagline}
                    </span>
                ))}
            </h1>

            <p class="hero-description">{description}</p>

            <div class="hero-cta">
                <a href="#projects" class="btn btn-primary">
                    <span>View Portfolio</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M13 5l7 7-7 7M5 12h14"></path>
                    </svg>
                </a>
                <a href="#contact" class="btn btn-secondary">
                    <span>Let's Connect</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                    </svg>
                </a>
            </div>

            <div class="hero-socials">
                <SocialLinks />
            </div>
        </div>

        <div class="hero-visual">
            <div class="code-background">
                <pre class="code-snippet"><code>
<span class="keyword">class</span> <span class="class-name">DigitalArchitect</span> 
    <span class="method">constructor</span>() }
        <span class="comment">// Crafting innovative solutions</span>
        <span class="keyword">this</span>.skills = [
            <span class="string">'AI'</span>,
            <span class="string">'Web3'</span>,
            <span class="string">'Full Stack'</span>
        ];
    }

    <span class="method">innovate</span>() 
        <span class="keyword">return</span> <span class="string">'Transforming Ideas'</span>;
    }
}</code></pre>
            </div>
        </div>
    </div>
</section>

<style>
    .advanced-hero {
        min-height: 100vh;
        display: flex;
        align-items: center;
        background: linear-gradient(
            135deg, 
            rgba(18, 18, 18, 0.95), 
            rgba(18, 18, 18, 0.98)
        );
        color: var(--text-light);
        overflow: hidden;
        position: relative;
    }

    .hero-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        gap: 2rem;
    }

    .hero-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        z-index: 2;
    }

    .code-terminal {
        background: #1E1E1E;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        max-width: 400px;
        margin-bottom: 1rem;
    }

    .terminal-header {
        display: flex;
        align-items: center;
        background: #2C2C2C;
        padding: 10px;
    }

    .terminal-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .terminal-dot.red { background: #FF5F56; }
    .terminal-dot.yellow { background: #FFBD2E; }
    .terminal-dot.green { background: #27C93F; }

    .terminal-body {
        padding: 1rem;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        color: #39FF14;
    }

    .terminal-prompt { color: #9CDCFE; }
    .terminal-path { color: #CE9178; }
    .terminal-command { color: #569CD6; }
    .terminal-result { color: #B5CEA8; }

    .hero-title {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        font-size: 3rem;
        font-weight: 900;
    }

    .hero-tagline {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.8s forwards;
        animation-delay: var(--delay);
        color: var(--primary-color);
    }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .hero-description {
        max-width: 500px;
        color: var(--secondary-color);
        opacity: 0.8;
    }

    .hero-cta {
        display: flex;
        gap: 1rem;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.8rem 1.5rem;
        border-radius: 5px;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: var(--primary-color);
        color: var(--background-dark);
    }

    .btn-secondary {
        border: 2px solid var(--primary-color);
        color: var(--primary-color);
    }

    .btn svg {
        width: 20px;
        height: 20px;
    }

    .hero-visual {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .code-background {
        background: #1E1E1E;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);
        max-width: 500px;
    }

    .code-snippet {
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        color: #D4D4D4;
        margin: 0;
        white-space: pre-wrap;
    }

    .keyword { color: #569CD6; }
    .class-name { color: #4EC9B0; }
    .method { color: #DCDCAA; }
    .comment { color: #6A9955; }
    .string { color: #CE9178; }

    @media (max-width: 1024px) {
        .hero-grid {
            grid-template-columns: 1fr;
            text-align: center;
        }

        .hero-content {
            align-items: center;
        }

        .hero-visual {
            display: none;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const taglines = ['Innovator', 'Full Stack Developer', 'AI & Web3 Enthusiast'];
        const typedTextElement = document.querySelector('.typed-text');
        let textIndex = 0;
        let charIndex = 0;
        let isDeleting = false;

        function type() {
            const currentText = taglines[textIndex];
            const displayText = isDeleting 
                ? currentText.slice(0, charIndex - 1) 
                : currentText.slice(0, charIndex + 1);

            typedTextElement.textContent = displayText;

            if (!isDeleting && displayText === currentText) {
                setTimeout(() => { isDeleting = true; }, 2000);
            } else if (isDeleting && displayText === '') {
                isDeleting = false;
                textIndex = (textIndex + 1) % taglines.length;
            }

            charIndex += isDeleting ? -1 : 1;
            setTimeout(type, isDeleting ? 50 : 150);
        }

        type();
    });
</script>
