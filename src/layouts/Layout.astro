---
import ChatWidget from '../components/ChatWidget.tsx';
import '../styles/animations.css';
import { UX_CONFIG } from '../utils/ux';

export interface Props {
	title?: string;
	description?: string;
	keywords?: string[];
	author?: string;
	ogImage?: string;
}

const { 
	title = "Michael Shaw | Digital Architect & AI Innovator", 
	description = "Michael Shaw: A visionary Digital Architect specializing in AI, automation, and innovative technology solutions. Transforming complex challenges into intelligent systems.",
	keywords = [
		"Michael Shaw", 
		"Digital Architect", 
		"AI Specialist", 
		"Technology Innovation", 
		"Automation Expert", 
		"Machine Learning", 
		"Software Development", 
		"Mad EZ Media"
	],
	author = "Michael Shaw",
	ogImage = "/images/mikey-shaw.png"
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<meta name="author" content={author} />
		<meta name="keywords" content={keywords.join(", ")} />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://mikeyshaw.online/" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content="https://mikeyshaw.online/" />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={ogImage} />

		<!-- Structured Data: Organization -->
		<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "Person",
			"name": "Michael Shaw",
			"jobTitle": "Digital Architect",
			"url": "https://mikeyshaw.online",
			"image": "/images/mikey-shaw.png",
			"sameAs": [
				"https://www.linkedin.com/in/michael-shaw-clt/",
				"https://github.com/madezmedia",
				"https://www.facebook.com/profile.php?id=100088552065336"
			],
			"worksFor": {
				"@type": "Organization",
				"name": "Mad EZ Media"
			},
			"knowsAbout": [
				"AI", 
				"Automation", 
				"Software Development", 
				"Technology Innovation"
			]
		}
		</script>

		<!-- Canonical Link -->
		<link rel="canonical" href="https://mikeyshaw.online" />

		<!-- Robots Meta Tag -->
		<meta name="robots" content="index, follow" />

		<!-- Preload Critical Assets -->
		<link rel="preload" href="/images/mikey-shaw.png" as="image" />
		<link rel="preload" href="/favicon.svg" as="image" />

		<slot name="head" />

		<script is:inline define:vars={{UX_CONFIG}}>
			// Advanced Theme Management with UX Considerations
			const THEME_TRANSITION_DURATION = UX_CONFIG.TRANSITION_DURATION;

			const getStoredTheme = () => localStorage.getItem('theme') || 'dark';
			const setStoredTheme = (theme) => localStorage.setItem('theme', theme);
			
			const getPreferredTheme = () => {
				const storedTheme = getStoredTheme();
				if (storedTheme) return storedTheme;
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			};

			const setTheme = (theme) => {
				document.documentElement.setAttribute('data-theme', theme);
				setStoredTheme(theme);
				
				// Dispatch global theme change event with UX transition
				const themeChangeEvent = new CustomEvent('theme-changed', { 
					detail: { 
						theme, 
						duration: THEME_TRANSITION_DURATION 
					} 
				});
				document.dispatchEvent(themeChangeEvent);
			};

			// Initial theme setup with transition
			const initTheme = () => {
				const theme = getPreferredTheme();
				document.documentElement.style.transition = `all ${THEME_TRANSITION_DURATION}ms ${UX_CONFIG.ANIMATION_EASE}`;
				setTheme(theme);
			};

			// Initialize on load
			window.addEventListener('load', initTheme);

			// Theme toggle listener
			window.addEventListener('load', () => {
				document.addEventListener('themeToggle', (e) => {
					const newTheme = e.detail.theme;
					setTheme(newTheme);
				});
			});
		</script>
	</head>
	<body>
		<div class="app-container">
			<div class="content-wrapper">
				<slot />
			</div>
		</div>
		<ChatWidget client:load />
	</body>
</html>

<style is:global>
	:root {
		/* Dark Mode Palette */
		--primary-dark: #D4AF37;     /* Gold */
		--secondary-dark: #C0C0C0;   /* Silver */
		--accent-dark: #708090;      /* Slate Gray */
		--bg-primary-dark: #121212;  /* Deep Black */
		--bg-secondary-dark: #1E1E1E;/* Soft Black */
		--text-primary-dark: #E0E0E0;/* Light Gray */
		--text-secondary-dark: #A0A0A0; /* Medium Gray */

		/* Light Mode Palette */
		--primary-light: #28A745;    /* Green */
		--secondary-light: #6C757D;  /* Gray */
		--accent-light: #28A745;     /* Green */
		--bg-primary-light: #F8F9FA; /* Light Gray */
		--bg-secondary-light: #FFFFFF; /* White */
		--text-primary-light: #212529; /* Dark Gray */
		--text-secondary-light: #495057; /* Medium Gray */

		/* Default to Dark Mode */
		--primary: var(--primary-dark);
		--secondary: var(--secondary-dark);
		--accent: var(--accent-dark);
		--bg-primary: var(--bg-primary-dark);
		--bg-secondary: var(--bg-secondary-dark);
		--text-primary: var(--text-primary-dark);
		--text-secondary: var(--text-secondary-dark);

		/* Layout Variables */
		--navbar-height: 80px;
		--content-top-padding: 100px;
	}

	/* Light Mode Overrides */
	:root[data-theme='light'] {
		--primary: var(--primary-light);
		--secondary: var(--secondary-light);
		--accent: var(--accent-light);
		--bg-primary: var(--bg-primary-light);
		--bg-secondary: var(--bg-secondary-light);
		--text-primary: var(--text-primary-light);
		--text-secondary: var(--text-secondary-light);
	}

	html, body {
		max-width: 100%;
		overflow-x: hidden;
		scroll-behavior: smooth;
		transition: 
			background-color 0.3s ease, 
			color 0.3s ease,
			background-image 0.3s ease;
	}

	html {
		font-family: 'Inter', system-ui, sans-serif;
		background: linear-gradient(
			135deg, 
			var(--bg-primary), 
			var(--bg-secondary)
		);
		color: var(--text-primary);
		line-height: 1.6;
	}

	body {
		background: transparent;
		color: var(--text-primary);
		margin: 0;
		padding: 0;
	}

	.app-container {
		width: 100%;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		background: linear-gradient(
			to bottom right, 
			color-mix(in srgb, var(--bg-primary) 90%, transparent),
			color-mix(in srgb, var(--bg-secondary) 90%, transparent)
		);
		transition: all 0.3s ease;
	}

	.content-wrapper {
		width: 100%;
		max-width: 1440px;
		margin: 0 auto;
		padding: 0 2rem;
		flex-grow: 1;
	}

	/* First section after navbar gets top padding */
	.content-wrapper > section:first-child {
		padding-top: var(--content-top-padding);
	}

	/* Global Theme Transition */
	* {
		transition: 
			background-color 0.3s ease,
			color 0.3s ease,
			border-color 0.3s ease,
			box-shadow 0.3s ease;
	}

	@media (max-width: 768px) {
		:root {
			--content-top-padding: 80px;
		}

		.content-wrapper {
			padding: 0 1rem;
		}
	}

	/* Scrollbar Styling */
	::-webkit-scrollbar {
		width: 10px;
	}

	::-webkit-scrollbar-track {
		background: var(--bg-secondary);
	}

	::-webkit-scrollbar-thumb {
		background: var(--accent-primary);
		border-radius: 5px;
	}

	::-webkit-scrollbar-thumb:hover {
		background: color-mix(in srgb, var(--accent-primary) 80%, white);
	}
</style>
